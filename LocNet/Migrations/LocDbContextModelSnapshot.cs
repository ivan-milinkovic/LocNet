// <auto-generated />
using System;
using LocNet.DbModel;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LocNet.Migrations
{
    [DbContext(typeof(LocDbContext))]
    partial class LocDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("LocNet.DbModel.Entry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("KeyId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("LocaleId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LocaleId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("KeyId", "LocaleId", "ProjectId")
                        .IsUnique();

                    b.ToTable("Entries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ad9105f7-724c-4b9e-8550-3b3f46d1ec14"),
                            KeyId = new Guid("54b47dd9-e6e7-43ed-9860-56a896406e48"),
                            LocaleId = new Guid("7988ea0c-f91a-4419-950d-4d7b2485fcbd"),
                            ProjectId = new Guid("f62aa12b-15d9-49a7-8817-02ac6729c0af"),
                            Value = "An elephant"
                        },
                        new
                        {
                            Id = new Guid("83e97db1-cc93-4d50-a0fb-9afae83b12fb"),
                            KeyId = new Guid("0ab7dbd2-eb58-4568-b642-e4e0760a9cce"),
                            LocaleId = new Guid("7988ea0c-f91a-4419-950d-4d7b2485fcbd"),
                            ProjectId = new Guid("f62aa12b-15d9-49a7-8817-02ac6729c0af"),
                            Value = "A cat"
                        },
                        new
                        {
                            Id = new Guid("f10d76a6-40f6-4c49-a561-550c6b0621b8"),
                            KeyId = new Guid("bfa178c2-307a-460a-947f-9bd88e272520"),
                            LocaleId = new Guid("7988ea0c-f91a-4419-950d-4d7b2485fcbd"),
                            ProjectId = new Guid("f62aa12b-15d9-49a7-8817-02ac6729c0af"),
                            Value = "A dog"
                        },
                        new
                        {
                            Id = new Guid("80b90a74-7382-4d5c-8e98-2ed3019186cb"),
                            KeyId = new Guid("54b47dd9-e6e7-43ed-9860-56a896406e48"),
                            LocaleId = new Guid("2d0155e6-e474-42c0-bd8d-02fc33d84e9f"),
                            ProjectId = new Guid("f62aa12b-15d9-49a7-8817-02ac6729c0af"),
                            Value = "Слон"
                        },
                        new
                        {
                            Id = new Guid("b7e46950-c2d8-4cf2-9b42-93de851c3203"),
                            KeyId = new Guid("0ab7dbd2-eb58-4568-b642-e4e0760a9cce"),
                            LocaleId = new Guid("2d0155e6-e474-42c0-bd8d-02fc33d84e9f"),
                            ProjectId = new Guid("f62aa12b-15d9-49a7-8817-02ac6729c0af"),
                            Value = "Мачка"
                        },
                        new
                        {
                            Id = new Guid("62a644af-e59f-454a-8ff6-622218372304"),
                            KeyId = new Guid("bfa178c2-307a-460a-947f-9bd88e272520"),
                            LocaleId = new Guid("2d0155e6-e474-42c0-bd8d-02fc33d84e9f"),
                            ProjectId = new Guid("f62aa12b-15d9-49a7-8817-02ac6729c0af"),
                            Value = "Пас"
                        });
                });

            modelBuilder.Entity("LocNet.DbModel.Key", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("Name", "ProjectId")
                        .IsUnique();

                    b.ToTable("Keys");

                    b.HasData(
                        new
                        {
                            Id = new Guid("54b47dd9-e6e7-43ed-9860-56a896406e48"),
                            Name = "elephant",
                            ProjectId = new Guid("f62aa12b-15d9-49a7-8817-02ac6729c0af")
                        },
                        new
                        {
                            Id = new Guid("0ab7dbd2-eb58-4568-b642-e4e0760a9cce"),
                            Name = "cat",
                            ProjectId = new Guid("f62aa12b-15d9-49a7-8817-02ac6729c0af")
                        },
                        new
                        {
                            Id = new Guid("bfa178c2-307a-460a-947f-9bd88e272520"),
                            Name = "dog",
                            ProjectId = new Guid("f62aa12b-15d9-49a7-8817-02ac6729c0af")
                        });
                });

            modelBuilder.Entity("LocNet.DbModel.Locale", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("Code", "ProjectId")
                        .IsUnique();

                    b.ToTable("Locales");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7988ea0c-f91a-4419-950d-4d7b2485fcbd"),
                            Code = "en",
                            ProjectId = new Guid("f62aa12b-15d9-49a7-8817-02ac6729c0af")
                        },
                        new
                        {
                            Id = new Guid("2d0155e6-e474-42c0-bd8d-02fc33d84e9f"),
                            Code = "sr",
                            ProjectId = new Guid("f62aa12b-15d9-49a7-8817-02ac6729c0af")
                        });
                });

            modelBuilder.Entity("LocNet.DbModel.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f62aa12b-15d9-49a7-8817-02ac6729c0af"),
                            Name = "HelloWorld"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProjectUser", b =>
                {
                    b.Property<Guid>("ProjectsId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UsersId")
                        .HasColumnType("TEXT");

                    b.HasKey("ProjectsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("ProjectUser");
                });

            modelBuilder.Entity("LocNet.DbModel.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("LocNet.DbModel.Entry", b =>
                {
                    b.HasOne("LocNet.DbModel.Key", "Key")
                        .WithMany()
                        .HasForeignKey("KeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LocNet.DbModel.Locale", "Locale")
                        .WithMany()
                        .HasForeignKey("LocaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LocNet.DbModel.Project", "Project")
                        .WithMany("Entries")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Key");

                    b.Navigation("Locale");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("LocNet.DbModel.Key", b =>
                {
                    b.HasOne("LocNet.DbModel.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("LocNet.DbModel.Locale", b =>
                {
                    b.HasOne("LocNet.DbModel.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectUser", b =>
                {
                    b.HasOne("LocNet.DbModel.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LocNet.DbModel.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LocNet.DbModel.Project", b =>
                {
                    b.Navigation("Entries");
                });
#pragma warning restore 612, 618
        }
    }
}
